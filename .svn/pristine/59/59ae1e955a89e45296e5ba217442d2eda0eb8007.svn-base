package oe.roma.appeals.service;

import oe.roma.appeals.domain.Appeal;
import oe.roma.appeals.domain.TypeAppeal;
import oe.roma.appeals.domain.User;
import org.apache.log4j.Logger;
import org.json.JSONArray;
import org.json.JSONObject;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.annotation.Resource;
import javax.sql.DataSource;
import java.security.Principal;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;

/**
 * Service for processing Persons.
 * <p/>
 * For a complete reference to Spring JDBC and JdbcTemplate
 * see http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/jdbc.html
 * <p/>
 * For transactions, see http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/transaction.html
 */
@Service("appealsService")
@Transactional
public class AppealsService {

    protected static Logger logger = Logger.getLogger("service");

    @Resource(name = "userService")
    private IUserService userService;

    private JdbcTemplate jdbcTemplate;

    @Resource(name = "dataSource")
    public void setDataSource(DataSource dataSource) {
        this.jdbcTemplate = new JdbcTemplate(dataSource);
    }


    public List<Appeal> getAll(int pageSize, int page, String sidx, String sord, String filters,String search) {
        logger.debug("Retrieving all registries");
        String searchQuery = getSearchQuery(filters,search);
        System.out.println(searchQuery);
        int total = 0;
        int count = getCountAppeals();

        if (count > 0) {
            total = (int) Math.ceil(count/pageSize);
        } else {
            total = 0;
        }

        if(page > total){
            page = total;
        }

        int start = pageSize*page - pageSize;
        if (start<0) start = 0;


        // Prepare our SQL statement
        String sql = "SELECT r.*, ta.name AS type_appeal_text FROM registry r LEFT JOIN type_appeals ta ON r.type_appeal = ta.id where 1=1 "+ searchQuery+" order by " + sidx+" "+ sord +" LIMIT "+start+", "+pageSize;

        System.out.println(sql);
        // Retrieve all
        return jdbcTemplate.query(sql, mapper);
    }

    public Integer getCountAppeals(){
        String sql="SELECT COUNT(*) FROM registry r LEFT JOIN type_appeals ta ON r.type_appeal = ta.id";

        return jdbcTemplate.queryForObject(sql, Integer.class);

    }

    public List<TypeAppeal> getTypeAppeals() {
        logger.debug("Retrieving all type_appeals");
        String sql = "SELECT id, name FROM type_appeals";

        // Maps a SQL result to a Java object
        RowMapper<TypeAppeal> mapper = new RowMapper<TypeAppeal>() {
            public TypeAppeal mapRow(ResultSet rs, int rowNum) throws SQLException {
                TypeAppeal typeAppeal = new TypeAppeal();
                typeAppeal.setId(rs.getInt("id"));
                typeAppeal.setName(rs.getString("name"));
                return typeAppeal;
            }
        };
        return jdbcTemplate.query(sql, mapper);
    }


    public void add(Appeal appeal) {
        logger.debug("Додавання нового звернення");
        Principal principal = SecurityContextHolder.getContext().getAuthentication();
        User currentUser = userService.getUserByName(principal.getName());
        jdbcTemplate.update("insert into registry (in_number, in_date, customer, text_appeal, type_appeal, executor,employee) values(?,?,?,?,?,?,?)",
                new Object[]{
                        appeal.getIn_number(),
                        appeal.getIn_date(),
                        appeal.getCustomer(),
                        appeal.getText_appeal(),
                        appeal.getType_appeal().getId(),
                        appeal.getExecutor(),
                        currentUser.getFullname()
                });
    }


    public void delete(Integer id) {
        logger.debug("Deleting existing registry");

        String sql = "delete from registry where id = ?";

        jdbcTemplate.update(sql, new Object[]{id});
    }

    public void edit(Appeal appeal) {

        logger.debug("Збереження звернення");

        String sql = "update registry set "
                +"in_number = ?, "
                +"in_date = ?, "
                +"customer = ?, "
                +"text_appeal = ?, "
                +"type_appeal = ?, "
                +"executor = ?, "
                +"out_number = ?, "
                +"out_date = ?, "
                +"some_second_name = ?, "
                +"text_answer = ?, "
                +"term_answer = ?, "
                +"deadline_term = ?, "
                +"response_term = ?, "
                +"reminder = ?, "
                +"employee = ? "
                +"where id = ?";

        jdbcTemplate.update(sql, new Object[]{
                appeal.getIn_number(),
                appeal.getIn_date(),
                appeal.getCustomer(),
                appeal.getText_appeal(),
                appeal.getType_appeal().getId(),
                appeal.getExecutor(),
                appeal.getOut_number(),
                appeal.getOut_date(),
                appeal.getSome_second_name(),
                appeal.getText_answer(),
                appeal.getTerm_answer(),
                appeal.getDeadline_term(),
                appeal.getResponse_term(),
                appeal.getReminder(),
                appeal.getEmployee(),
                appeal.getId()
        });
    }

    public Appeal get(Integer id) {
        logger.debug("Отримання звернення #"+id+" з бази");
        String sql = "SELECT r.*, ta.name AS type_appeal_text FROM registry r " +
                        "LEFT JOIN type_appeals ta ON r.type_appeal = ta.id where r.id=?";

        Appeal appeal = (Appeal) jdbcTemplate.queryForObject(
                sql, new Object[]{id},mapper);
        return appeal;
    };


    RowMapper<Appeal> mapper = new RowMapper<Appeal>() {
        public Appeal mapRow(ResultSet rs, int rowNum) throws SQLException {
            Appeal appeal = new Appeal();
            appeal.setId(rs.getInt("id"));
            appeal.setIn_number(rs.getString("in_number"));
            appeal.setIn_date(rs.getDate("in_date"));
            appeal.setCustomer(rs.getString("customer"));
            appeal.setText_appeal(rs.getString("text_appeal"));
            appeal.getType_appeal().setName(rs.getString("type_appeal_text"));
            appeal.setExecutor(rs.getString("executor"));
            appeal.setOut_number(rs.getString("out_number"));
            appeal.setOut_date(rs.getDate("out_date"));
            appeal.setSome_second_name(rs.getString("some_second_name"));
            appeal.setText_answer(rs.getString("text_answer"));
            appeal.setTerm_answer(rs.getInt("term_answer"));
                if(rs.wasNull()) appeal.setTerm_answer(null);
            appeal.setDeadline_term(rs.getDate("deadline_term"));
            appeal.setResponse_term(rs.getInt("response_term"));
                if(rs.wasNull()) appeal.setResponse_term(null);
            appeal.setReminder(rs.getDate("reminder"));
            appeal.setEmployee(rs.getString("employee"));
            return appeal;
        }
    };

    public List<Appeal> search(Appeal appeal) {
        logger.debug("Retrieving all registries");

        // Prepare our SQL statement
        String sql = "SELECT r.*, ta.name AS type_appeal_text FROM registry r " +
                        "LEFT JOIN type_appeals ta ON r.type_appeal = ta.id where 1=1 ";

        if (appeal.getIn_number()!=null) sql+="and r.in_number like '"+appeal.getIn_number()+"%'";
        return jdbcTemplate.query(sql, mapper);
    }

    public String getSearchQuery(String filters,String search){
        JSONObject json = new JSONObject();
        JSONArray rules;
        String field;
        String qWhere = new String();
        if (search != null) {
            if (search.equals("true")) {
                json = new JSONObject(filters);
                rules = json.getJSONArray("rules");
                for (int ji = 0; ji < rules.length(); ji++) {
                    field = rules.getJSONObject(ji).getString("field");
                    String data = rules.getJSONObject(ji).getString("data");
                    if(field.equals("in_date") || field.equals("out_date")||field.equals("deadline_term") || field.equals("reminder")){
                        rules.getJSONObject(ji).put("data",formatDate(data));
                    };
                    qWhere += " " + json.getString("groupOp") + " ";
                    String op = rules.getJSONObject(ji).getString("op");
                    if (op.equals("eq")) {
                        qWhere += field + " = '" + data + "'";
                    } else if (op.equals("ne")) {
                        qWhere += field + " <> '" + data + "'";
                    } else if (op.equals("bw")) {
                        qWhere += field + "  LIKE  '" + data + "%'";
                    } else if (op.equals("cn")) {
                        qWhere += field + "  LIKE  " + "'%" + data + "%'";
                    } else if (op.equals("nu")) {
                        qWhere += field + "  IS NULL ";
                    }
                }
            }
        }
        return qWhere;
    }

    public String formatDate (String dateIn){
        if(dateIn.length()<10) return dateIn;
        DateFormat originalFormat = new SimpleDateFormat("dd.MM.yyyy", Locale.ENGLISH);
        DateFormat targetFormat = new SimpleDateFormat("yyyy-MM-dd");
        Date date = null;
        try {
            date = originalFormat.parse(dateIn);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        String formattedDate = targetFormat.format(date);
        return formattedDate;
    }


}
